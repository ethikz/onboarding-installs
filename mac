#!/bin/bash

# Welcome to the monfresh laptop script!
# Be prepared to turn your laptop (or desktop)
# into an awesome development machine.

read -r -s -p "Please enter your computer password so that you do not have to enter it multiple times the script will ask you to: " PASS

echo -e "\n\n Do you have Xcode already installed? [y/N]"
read -r -n 1 response

if [ "$response" = "y" ] || [ "$response" = "Y" ]; then
    echo -e "\n"
    sudo -S <<< "$PASS" xcodebuild -license accept
    sudo -S <<< "$PASS" xcode-select --switch /Applications/Xcode.app/Contents/Developer

    if ! type xcode-select >&- && xpath=$( xcode-select --print-path ) && test -d "${xpath}" && test -x "${xpath}" ; then
        xcode-select --install
    fi
elif [ "$response" = "n" ] || [ "$response" = "N" ]; then
    bold=$(tput bold)
    normal=$(tput sgr0)
    
    echo "Install Xcode first.  Once finished press the ${bold}Enter${normal} key to continue."
    read -r -p "Press enter to continue"
fi


fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}
export -f fancy_echo

append_to_file() {
  # shellcheck disable=SC2039
  local file="$1"
  # shellcheck disable=SC2039
  local text="$2"

  if [ "$file" = "$HOME/.zshrc" ]; then
    if [ -w "$HOME/.zshrc.local" ]; then
      file="$HOME/.zshrc.local"
    else
      file="$HOME/.zshrc"
    fi
  elif [ "$file" = "$HOME/.bash_profile" ]; then
    file="$HOME/.bash_profile"
  fi

  if ! grep -qs "^$text$" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}
export -f append_to_file

export shell_file

create_zshrc_and_set_it_as_shell_file() {
  if [ ! -f "$HOME/.zshrc" ]; then
    curl --remote-name https://raw.githubusercontent.com/ethikz/dotfiles/master/.zshrc
    curl --remote-name https://raw.githubusercontent.com/ethikz/dotfiles/master/.vimrc
  fi

  shell_file="$HOME/.zshrc"
}

create_bash_profile_and_set_it_as_shell_file() {
  if [ ! -f "$HOME/.bash_profile" ]; then
    touch "$HOME/.bash_profile"
  fi

  shell_file="$HOME/.bash_profile"
}

change_shell_to_zsh() {
  fancy_echo "Please enter your password to continue."
  echo "Note that there won't be visual feedback when you type your password."
  echo "Type it slowly and press return, or press control-c to cancel the switch to zsh and exit the script."

  create_zshrc_and_set_it_as_shell_file
  sudo -S <<< "$PASS" chsh -s "$(which zsh)"

  echo "Note that you can always switch back to ${bold}bash${normal} if you change your mind."
  echo "The instructions for changing shells manually are available in the README."
}

upgrade_newest_npm() {
  npm install -g npm@latest
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

case "$SHELL" in
  */zsh) :
    create_zshrc_and_set_it_as_shell_file
    ;;
  *)
    create_bash_profile_and_set_it_as_shell_file
    if [ -z "$CI" ]; then
      bold=$(tput bold)
      normal=$(tput sgr0)
      echo "Want to switch your shell from the default ${bold}bash${normal} to ${bold}zsh${normal}?"
      echo "Both work fine for development, and ${bold}zsh${normal} has some extra "
      echo "features for customization and tab completion."
      echo "If you aren't sure or don't care, we recommend ${bold}zsh${normal}."
      echo -n "Press ${bold}y${normal} to switch to zsh, ${bold}n${normal} to keep bash: "
      read -r -n 1 response
      if [ "$response" = "y" ]; then
        fancy_echo "=== Getting ready to change your shell to zsh. ==="
        if ! grep -qs "$(which zsh)" /etc/shells; then
          echo "It looks like your version of zsh is missing from ${bold}/etc/shells${normal}."
          echo "It must be added there manually before your shell can be changed."
          echo "Open ${bold}/etc/shells${normal} with your favorite text editor,"
          echo "then add ${bold}$(which zsh)${normal} in a new line and save the file."
          echo -n "Once you've added it, press ${bold}y${normal} to continue, or ${bold}n${normal} to cancel: "
          read -r -n 1 response
          if [ "$response" = "y" ]; then
            change_shell_to_zsh
          else
            fancy_echo "Shell will not be changed."
          fi
        else
          change_shell_to_zsh
        fi
      else
        fancy_echo "Shell will not be changed."
      fi
    else
      fancy_echo "CI System detected, will not change shells"
    fi
    ;;
esac

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

tap_is_installed() {
  brew tap -1 | grep -Fqx "$1"
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

latest_installed_ruby() {
  find "$HOME/.rvm" -maxdepth 1 -name 'ruby-*' | tail -n1 | egrep -o '\d+\.\d+\.\d+'
}

switch_to_latest_ruby() {
  # shellcheck disable=SC1091
  rvm use "ruby-${latest_installed_ruby}"

  append_to_file "$shell_file" "alias latest-ruby='prompt_ruby_info'"
}

append_to_file "$shell_file" "alias laptop='bash <(curl -s https://raw.githubusercontent.com/ethikz/onboarding-installs/master/laptop)'"

# shellcheck disable=SC2016
if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

# Remove brew-cask since it is now installed as part of brew tap caskroom/cask.
# See https://github.com/caskroom/homebrew-cask/releases/tag/v0.60.0
if brew_is_installed 'brew-cask'; then
  brew uninstall --force 'brew-cask'
fi

if tap_is_installed 'caskroom/versions'; then
  brew untap caskroom/versions
fi

fancy_echo "Updating Homebrew ..."
cd "$(brew --repo)" && git fetch && git reset --hard origin/master && brew update

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "Review the Homebrew messages to see if any action is needed."
fi

fancy_echo "Installing formulas and casks from the Brewfile ..."
if brew bundle --file="$HOME/Brewfile"; then
  fancy_echo "All formulas and casks were installed successfully."
else
  fancy_echo "Some formulas or casks failed to install."
  echo "This is usually due to one of the Mac apps being already installed,"
  echo "in which case, you can ignore these errors."
fi

fancy_echo 'Checking on Node.js installation...'

if ! brew_is_installed "node"; then
  npm config set loglevel warn

  if command -v n > /dev/null; then
    fancy_echo "We recommend using \`nvm\` and not \`n\`."
  elif ! command -v nvm > /dev/null; then
    fancy_echo 'Installing nvm and lts Node.js and npm...'
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    
    # shellcheck source=/dev/null
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install node --lts
  else
    fancy_echo 'version manager detected.  Skipping...'
  fi
else
  npm config set loglevel warn
  brew bundle --file=- <<EOF
  brew 'node'
EOF
fi

upgrade_newest_npm

file="$HOME/npm-packages"
while read -r app; do
  echo "$app"
  npm install -g "$app"
done < "$file"

fancy_echo '...Finished Node.js installation checks.'



# shellcheck disable=SC2016
append_to_file "$HOME/.gemrc" 'gem: --no-document'

fancy_echo 'Checking on Ruby installation...'

if hash rvm &> /dev/null; then
  echo "RVM already installed"
else
  echo "Installing RVM..."
  curl -sSL https://get.rvm.io | grep -v __rvm_print_headline | bash -s stable --ruby --auto-dotfiles

  # shellcheck source=/dev/null
  source "$HOME/.rvm/scripts/rvm"

  rvm requirements

  switch_to_latest_ruby
fi

sudo -S <<< "$PASS" chmod -R a+X "/Library"
sudo -S <<< "$PASS" chmod -R a+X "$HOME/.rvm/"
sudo -S <<< "$PASS" chown -R "$(id -u):$(id -g)" "/Library/Ruby"

fancy_echo 'Updating Rubygems...'
gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo '...Finished Ruby installation checks.'

no_prompt_customizations_in_shell_file() {
  ! grep -qs -e "PS1=" -e "precmd" -e "PROMPT=" "$shell_file"
}

no_zsh_frameworks() {
  [ ! -d "$HOME/.oh-my-zsh" ] && [ ! -d "$HOME/.zpresto" ] && [ ! -d "$HOME/.zim" ] && [ ! -d "$HOME/.zplug" ]
}

if [ -z "$CI" ] && no_zsh_frameworks && no_prompt_customizations_in_shell_file; then
  echo -n "Would you like to customize your prompt to display the current directory and ruby version? [y/n]: "
  read -r -n 1 response
  if [ "$response" = "y" ]; then
    if ! grep -qs "prompt_ruby_info()" "$shell_file"; then
      cat <<EOT >> "$shell_file"
  
  prompt_ruby_info() {
    if [ -f ".ruby-version" ]; then
      cat .ruby-version
    fi
  }
EOT
    fi
  else
    fancy_echo "Skipping prompt customization."
  fi
fi

if [ -f "$HOME/.laptop.local" ] || [ -f "$HOME/send-message" ]; then
  # shellcheck source=/dev/null
  cd ~/ || exit

  if [ -f "$HOME/.laptop.local" ]; then
    chmod +x .laptop.local
    ./.laptop.local
  fi

  if [ -f "$HOME/send-message" ]; then
    chmod +x send-message
    ./send-message
  fi
fi


if [ -f "/Applications/SizeUp.app" ]; then
   cd ~/Downloads || exit
   curl -O 70.63.134.210/Design\ Assets/Software/Licenses/SizeUp.sizeuplicense
   open ~/Downloads/SizeUp.sizeuplicense
fi


# file="$HOME/Brewfile"
# number=0
# while read -r app; do
#
#     [[ "$app" =~ ^'cask_args'.*$ || "$app" =~ ^'tap'.*$ || "$app" =~ ^'brew'.*$ ]] && continue
#
#     appName=$(echo "${app}" | sed -n " s,[^']*'\([^']*\).*,\1,p " | sed -e 's/-/\ /g')
#     cleanName=$(echo "${appName}" | awk '{for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
#
#     echo "${cleanName}" | sed '/^\s*$/d'
#
#     if brew cask ls --versions "${cleanName}" | sed '/^\s*$/d'; then
#       defaults write com.apple.dock persistent-apps -array-add "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/$(echo "${cleanName}" | sed '/^\s*$/d').app</string><key>_CFURLStringType</key><integer>${number}</integer></dict></dict></dict>"
#     elif brew cask ls --versions ""; then
#       continue
#     else
#       brew cask install "${cleanName}"
#       defaults write com.apple.dock persistent-apps -array-add "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/$(echo "${cleanName}" | sed '/^\s*$/d').app</string><key>_CFURLStringType</key><integer>${number}</integer></dict></dict></dict>"
#     fi
#
#      number=$((number + 1))
# done < "$file"
#
# killall Dock

fancy_echo 'All done!'
